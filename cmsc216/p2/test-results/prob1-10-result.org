* (TEST 10) set_display_from_batt() Mid Range P : ok
** COMMENTS


** Test Segment 1 : ok
** set_display_from_batt() 62 %

*** PROGRAM: ./test_batt_update "set_display_from_batt() 62 %"
To run this individual test in GDB use the command:
gdb --args ./test_batt_update "set_display_from_batt() 62 %"
but any input to the program must be typed within the debugger

*** FAILURE MESSAGES
None

*** SIDE-BY-SIDE DIFF of Expected vs Actual
. lines match; | lines differ; < expected line missing; > extra line in actual

#+BEGIN_SRC sdiff
===EXPECT===                                                 ===ACTUAL===
{                                                          . {
    // Percent mode, show 62 %                             .     // Percent mode, show 62 %
    BATT_VOLTAGE_PORT = -1;                                .     BATT_VOLTAGE_PORT = -1;
    BATT_STATUS_PORT  = -1;                                .     BATT_STATUS_PORT  = -1;
    BATT_DISPLAY_PORT = -1;                                .     BATT_DISPLAY_PORT = -1;
    batt_t batt = {                                        .     batt_t batt = {
      .mlvolts = 3500,                                     .       .mlvolts = 3500,
      .percent = 62,                                       .       .percent = 62,
      .mode = 1,                                           .       .mode = 1,
    };                                                     .     };
    int ret = set_display_from_batt(batt, dispint);        .     int ret = set_display_from_batt(batt, dispint);
    printf("ret: %d\n",ret);                               .     printf("ret: %d\n",ret);
    printf("%-18s : %s\n%-18s : %s\n",                     .     printf("%-18s : %s\n%-18s : %s\n",
           "dispint bits", bitstr(*dispint, INT_BITS),     .            "dispint bits", bitstr(*dispint, INT_BITS),
           "index", bitstr_index(INT_BITS));               .            "index", bitstr_index(INT_BITS));
    printf("\n");  print_ports();  printf("\n");           .     printf("\n");  print_ports();  printf("\n");
    BATT_DISPLAY_PORT = *dispint;                          .     BATT_DISPLAY_PORT = *dispint;
    printf("Display based on dispint:\n");                 .     printf("Display based on dispint:\n");
    print_batt_display();                                  .     print_batt_display();
}                                                          . }
---OUTPUT---                                               . ---OUTPUT---
ret: 0                                                     . ret: 0
dispint bits       : 000 00111 0000000 1111101 1011011 001 . dispint bits       : 000 00111 0000000 1111101 1011011 001
index              :  29    24      17      10       3   0 . index              :  29    24      17      10       3   0
                                                           . 
BATT_VOLTAGE_PORT  : -1                                    . BATT_VOLTAGE_PORT  : -1
BATT_STATUS_PORT   : 111 11111                             . BATT_STATUS_PORT   : 111 11111
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111 . BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
index              :  29    24      17      10       3   0 . index              :  29    24      17      10       3   0
                                                           . 
Display based on dispint:                                  . Display based on dispint:
+-^^^-+         ####  ####                                 . +-^^^-+         ####  ####     
|     |         #        #                                 . |     |         #        #     
|     |         #        #                                 . |     |         #        #     
|#####|         ####  ####                                 . |#####|         ####  ####     
|#####|         #  #  #     %                              . |#####|         #  #  #     %  
|#####|         #  #  #                                    . |#####|         #  #  #        
+-----+         ####  ####                                 . +-----+         ####  ####     

#+END_SRC

*** LINE-BY-LINE DIFF of Expected vs Actual
No differences found

*** VALGRIND REPORT
The program is run on under valgrind as
stdbuf -i 0 -o 0 -e 0 valgrind --error-exitcode=13 --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_batt_update set_display_from_batt() 62 %
which may be pasted onto a command line to run it.

#+BEGIN_SRC text
==48123== Memcheck, a memory error detector
==48123== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==48123== Using Valgrind-3.24.0 and LibVEX; rerun with -h for copyright info
==48123== Command: ./test_batt_update set_display_from_batt()\ 62\ %
==48123== 
==48123== 
==48123== HEAP SUMMARY:
==48123==     in use at exit: 0 bytes in 0 blocks
==48123==   total heap usage: 1 allocs, 1 frees, 4 bytes allocated
==48123== 
==48123== All heap blocks were freed -- no leaks are possible
==48123== 
==48123== For lists of detected and suppressed errors, rerun with: -s
==48123== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
#+END_SRC

** Test Segment 2 : ok
** set_display_from_batt() 87 %

*** PROGRAM: ./test_batt_update "set_display_from_batt() 87 %"
To run this individual test in GDB use the command:
gdb --args ./test_batt_update "set_display_from_batt() 87 %"
but any input to the program must be typed within the debugger

*** FAILURE MESSAGES
None

*** SIDE-BY-SIDE DIFF of Expected vs Actual
. lines match; | lines differ; < expected line missing; > extra line in actual

#+BEGIN_SRC sdiff
===EXPECT===                                                 ===ACTUAL===
{                                                          . {
    // Show 87 %                                           .     // Show 87 %
    BATT_VOLTAGE_PORT = -1;                                .     BATT_VOLTAGE_PORT = -1;
    BATT_STATUS_PORT  = -1;                                .     BATT_STATUS_PORT  = -1;
    BATT_DISPLAY_PORT = -1;                                .     BATT_DISPLAY_PORT = -1;
    batt_t batt = {                                        .     batt_t batt = {
      .mlvolts = 3700,                                     .       .mlvolts = 3700,
      .percent = 87,                                       .       .percent = 87,
      .mode = 1,                                           .       .mode = 1,
    };                                                     .     };
    int ret = set_display_from_batt(batt, dispint);        .     int ret = set_display_from_batt(batt, dispint);
    printf("ret: %d\n",ret);                               .     printf("ret: %d\n",ret);
    printf("%-18s : %s\n%-18s : %s\n",                     .     printf("%-18s : %s\n%-18s : %s\n",
           "dispint bits", bitstr(*dispint, INT_BITS),     .            "dispint bits", bitstr(*dispint, INT_BITS),
           "index", bitstr_index(INT_BITS));               .            "index", bitstr_index(INT_BITS));
    printf("\n");  print_ports();  printf("\n");           .     printf("\n");  print_ports();  printf("\n");
    BATT_DISPLAY_PORT = *dispint;                          .     BATT_DISPLAY_PORT = *dispint;
    printf("Display based on dispint:\n");                 .     printf("Display based on dispint:\n");
    print_batt_display();                                  .     print_batt_display();
}                                                          . }
---OUTPUT---                                               . ---OUTPUT---
ret: 0                                                     . ret: 0
dispint bits       : 000 01111 0000000 1111111 0000111 001 . dispint bits       : 000 01111 0000000 1111111 0000111 001
index              :  29    24      17      10       3   0 . index              :  29    24      17      10       3   0
                                                           . 
BATT_VOLTAGE_PORT  : -1                                    . BATT_VOLTAGE_PORT  : -1
BATT_STATUS_PORT   : 111 11111                             . BATT_STATUS_PORT   : 111 11111
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111 . BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
index              :  29    24      17      10       3   0 . index              :  29    24      17      10       3   0
                                                           . 
Display based on dispint:                                  . Display based on dispint:
+-^^^-+         ####  ####                                 . +-^^^-+         ####  ####     
|     |         #  #     #                                 . |     |         #  #     #     
|#####|         #  #     #                                 . |#####|         #  #     #     
|#####|         ####     #                                 . |#####|         ####     #     
|#####|         #  #     #  %                              . |#####|         #  #     #  %  
|#####|         #  #     #                                 . |#####|         #  #     #     
+-----+         ####     #                                 . +-----+         ####     #     

#+END_SRC

*** LINE-BY-LINE DIFF of Expected vs Actual
No differences found

*** VALGRIND REPORT
The program is run on under valgrind as
stdbuf -i 0 -o 0 -e 0 valgrind --error-exitcode=13 --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_batt_update set_display_from_batt() 87 %
which may be pasted onto a command line to run it.

#+BEGIN_SRC text
==48185== Memcheck, a memory error detector
==48185== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==48185== Using Valgrind-3.24.0 and LibVEX; rerun with -h for copyright info
==48185== Command: ./test_batt_update set_display_from_batt()\ 87\ %
==48185== 
==48185== 
==48185== HEAP SUMMARY:
==48185==     in use at exit: 0 bytes in 0 blocks
==48185==   total heap usage: 1 allocs, 1 frees, 4 bytes allocated
==48185== 
==48185== All heap blocks were freed -- no leaks are possible
==48185== 
==48185== For lists of detected and suppressed errors, rerun with: -s
==48185== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
#+END_SRC

** SUMMARY
Test Passed
