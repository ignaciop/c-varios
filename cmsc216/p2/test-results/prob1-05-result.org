* (TEST 5) set_batt_from_ports() Various : ok
** COMMENTS


** Test Segment 1 : ok
** set_batt_from_ports() 2500 V

*** PROGRAM: ./test_batt_update "set_batt_from_ports() 2500 V"
To run this individual test in GDB use the command:
gdb --args ./test_batt_update "set_batt_from_ports() 2500 V"
but any input to the program must be typed within the debugger

*** FAILURE MESSAGES
None

*** SIDE-BY-SIDE DIFF of Expected vs Actual
. lines match; | lines differ; < expected line missing; > extra line in actual

#+BEGIN_SRC sdiff
===EXPECT===                                                 ===ACTUAL===
{                                                          . {
    // Checks a low voltage rating should be 0 percent     .     // Checks a low voltage rating should be 0 percent
    BATT_VOLTAGE_PORT = 2500;                              .     BATT_VOLTAGE_PORT = 2500;
    BATT_STATUS_PORT  = 0b000000;                          .     BATT_STATUS_PORT  = 0b000000;
    BATT_DISPLAY_PORT = -1;                                .     BATT_DISPLAY_PORT = -1;
    batt_t actual = {};            // all 0s               .     batt_t actual = {};            // all 0s
    int ret = set_batt_from_ports(&actual);                .     int ret = set_batt_from_ports(&actual);
    printf("ret: %d\n",ret);                               .     printf("ret: %d\n",ret);
    printf("actual = "); print_batt(actual);               .     printf("actual = "); print_batt(actual);
    print_ports();                                         .     print_ports();
}                                                          . }
---OUTPUT---                                               . ---OUTPUT---
ret: 0                                                     . ret: 0
actual = {                                                 . actual = {
  .mlvolts = 1250,                                         .   .mlvolts = 1250,
  .percent = 0,                                            .   .percent = 0,
  .mode    = 2,                                            .   .mode    = 2,
}                                                          . }
BATT_VOLTAGE_PORT  : 2500                                  . BATT_VOLTAGE_PORT  : 2500
BATT_STATUS_PORT   : 000 00000                             . BATT_STATUS_PORT   : 000 00000
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111 . BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
index              :  29    24      17      10       3   0 . index              :  29    24      17      10       3   0

#+END_SRC

*** LINE-BY-LINE DIFF of Expected vs Actual
No differences found

*** VALGRIND REPORT
The program is run on under valgrind as
stdbuf -i 0 -o 0 -e 0 valgrind --error-exitcode=13 --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_batt_update set_batt_from_ports() 2500 V
which may be pasted onto a command line to run it.

#+BEGIN_SRC text
==48118== Memcheck, a memory error detector
==48118== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==48118== Using Valgrind-3.24.0 and LibVEX; rerun with -h for copyright info
==48118== Command: ./test_batt_update set_batt_from_ports()\ 2500\ V
==48118== 
==48118== 
==48118== HEAP SUMMARY:
==48118==     in use at exit: 0 bytes in 0 blocks
==48118==   total heap usage: 1 allocs, 1 frees, 4 bytes allocated
==48118== 
==48118== All heap blocks were freed -- no leaks are possible
==48118== 
==48118== For lists of detected and suppressed errors, rerun with: -s
==48118== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
#+END_SRC

** Test Segment 2 : ok
** set_batt_from_ports() 6579 P

*** PROGRAM: ./test_batt_update "set_batt_from_ports() 6579 P"
To run this individual test in GDB use the command:
gdb --args ./test_batt_update "set_batt_from_ports() 6579 P"
but any input to the program must be typed within the debugger

*** FAILURE MESSAGES
None

*** SIDE-BY-SIDE DIFF of Expected vs Actual
. lines match; | lines differ; < expected line missing; > extra line in actual

#+BEGIN_SRC sdiff
===EXPECT===                                                           ===ACTUAL===
{                                                                    . {
    // Checks proper voltage / percent for a mid-range sensor value. .     // Checks proper voltage / percent for a mid-range sensor value.
    BATT_VOLTAGE_PORT = 6579;                                        .     BATT_VOLTAGE_PORT = 6579;
    BATT_STATUS_PORT  = 0b010000;                                    .     BATT_STATUS_PORT  = 0b010000;
    BATT_DISPLAY_PORT = -1;                                          .     BATT_DISPLAY_PORT = -1;
    batt_t actual = {};            // all 0s                         .     batt_t actual = {};            // all 0s
    int ret = set_batt_from_ports(&actual);                          .     int ret = set_batt_from_ports(&actual);
    printf("ret: %d\n",ret);                                         .     printf("ret: %d\n",ret);
    printf("actual = "); print_batt(actual);                         .     printf("actual = "); print_batt(actual);
    print_ports();                                                   .     print_ports();
}                                                                    . }
---OUTPUT---                                                         . ---OUTPUT---
ret: 0                                                               . ret: 0
actual = {                                                           . actual = {
  .mlvolts = 3289,                                                   .   .mlvolts = 3289,
  .percent = 36,                                                     .   .percent = 36,
  .mode    = 1,                                                      .   .mode    = 1,
}                                                                    . }
BATT_VOLTAGE_PORT  : 6579                                            . BATT_VOLTAGE_PORT  : 6579
BATT_STATUS_PORT   : 000 10000                                       . BATT_STATUS_PORT   : 000 10000
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111           . BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
index              :  29    24      17      10       3   0           . index              :  29    24      17      10       3   0

#+END_SRC

*** LINE-BY-LINE DIFF of Expected vs Actual
No differences found

*** VALGRIND REPORT
The program is run on under valgrind as
stdbuf -i 0 -o 0 -e 0 valgrind --error-exitcode=13 --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_batt_update set_batt_from_ports() 6579 P
which may be pasted onto a command line to run it.

#+BEGIN_SRC text
==48151== Memcheck, a memory error detector
==48151== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==48151== Using Valgrind-3.24.0 and LibVEX; rerun with -h for copyright info
==48151== Command: ./test_batt_update set_batt_from_ports()\ 6579\ P
==48151== 
==48151== 
==48151== HEAP SUMMARY:
==48151==     in use at exit: 0 bytes in 0 blocks
==48151==   total heap usage: 1 allocs, 1 frees, 4 bytes allocated
==48151== 
==48151== All heap blocks were freed -- no leaks are possible
==48151== 
==48151== For lists of detected and suppressed errors, rerun with: -s
==48151== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
#+END_SRC

** Test Segment 3 : ok
** set_batt_from_ports() 6016 V

*** PROGRAM: ./test_batt_update "set_batt_from_ports() 6016 V"
To run this individual test in GDB use the command:
gdb --args ./test_batt_update "set_batt_from_ports() 6016 V"
but any input to the program must be typed within the debugger

*** FAILURE MESSAGES
None

*** SIDE-BY-SIDE DIFF of Expected vs Actual
. lines match; | lines differ; < expected line missing; > extra line in actual

#+BEGIN_SRC sdiff
===EXPECT===                                                 ===ACTUAL===
{                                                          . {
    // Low voltage sensor value should yield 1%            .     // Low voltage sensor value should yield 1%
    BATT_VOLTAGE_PORT = 6016;                              .     BATT_VOLTAGE_PORT = 6016;
    BATT_STATUS_PORT  = 0b101100;                          .     BATT_STATUS_PORT  = 0b101100;
    BATT_DISPLAY_PORT = -1;                                .     BATT_DISPLAY_PORT = -1;
    batt_t actual = {};            // all 0s               .     batt_t actual = {};            // all 0s
    int ret = set_batt_from_ports(&actual);                .     int ret = set_batt_from_ports(&actual);
    printf("ret: %d\n",ret);                               .     printf("ret: %d\n",ret);
    printf("actual = "); print_batt(actual);               .     printf("actual = "); print_batt(actual);
    print_ports();                                         .     print_ports();
}                                                          . }
---OUTPUT---                                               . ---OUTPUT---
ret: 0                                                     . ret: 0
actual = {                                                 . actual = {
  .mlvolts = 3008,                                         .   .mlvolts = 3008,
  .percent = 1,                                            .   .percent = 1,
  .mode    = 2,                                            .   .mode    = 2,
}                                                          . }
BATT_VOLTAGE_PORT  : 6016                                  . BATT_VOLTAGE_PORT  : 6016
BATT_STATUS_PORT   : 001 01100                             . BATT_STATUS_PORT   : 001 01100
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111 . BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
index              :  29    24      17      10       3   0 . index              :  29    24      17      10       3   0

#+END_SRC

*** LINE-BY-LINE DIFF of Expected vs Actual
No differences found

*** VALGRIND REPORT
The program is run on under valgrind as
stdbuf -i 0 -o 0 -e 0 valgrind --error-exitcode=13 --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_batt_update set_batt_from_ports() 6016 V
which may be pasted onto a command line to run it.

#+BEGIN_SRC text
==48191== Memcheck, a memory error detector
==48191== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==48191== Using Valgrind-3.24.0 and LibVEX; rerun with -h for copyright info
==48191== Command: ./test_batt_update set_batt_from_ports()\ 6016\ V
==48191== 
==48191== 
==48191== HEAP SUMMARY:
==48191==     in use at exit: 0 bytes in 0 blocks
==48191==   total heap usage: 1 allocs, 1 frees, 4 bytes allocated
==48191== 
==48191== All heap blocks were freed -- no leaks are possible
==48191== 
==48191== For lists of detected and suppressed errors, rerun with: -s
==48191== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
#+END_SRC

** Test Segment 4 : ok
** set_batt_from_ports() 6050 P

*** PROGRAM: ./test_batt_update "set_batt_from_ports() 6050 P"
To run this individual test in GDB use the command:
gdb --args ./test_batt_update "set_batt_from_ports() 6050 P"
but any input to the program must be typed within the debugger

*** FAILURE MESSAGES
None

*** SIDE-BY-SIDE DIFF of Expected vs Actual
. lines match; | lines differ; < expected line missing; > extra line in actual

#+BEGIN_SRC sdiff
===EXPECT===                                                 ===ACTUAL===
{                                                          . {
    // Low voltage sensor value, should be nonzero percent .     // Low voltage sensor value, should be nonzero percent
    BATT_VOLTAGE_PORT = 6050;                              .     BATT_VOLTAGE_PORT = 6050;
    BATT_STATUS_PORT  = 0b110000;                          .     BATT_STATUS_PORT  = 0b110000;
    BATT_DISPLAY_PORT = -1;                                .     BATT_DISPLAY_PORT = -1;
    batt_t actual = {};            // all 0s               .     batt_t actual = {};            // all 0s
    int ret = set_batt_from_ports(&actual);                .     int ret = set_batt_from_ports(&actual);
    printf("ret: %d\n",ret);                               .     printf("ret: %d\n",ret);
    printf("actual = "); print_batt(actual);               .     printf("actual = "); print_batt(actual);
    print_ports();                                         .     print_ports();
}                                                          . }
---OUTPUT---                                               . ---OUTPUT---
ret: 0                                                     . ret: 0
actual = {                                                 . actual = {
  .mlvolts = 3025,                                         .   .mlvolts = 3025,
  .percent = 3,                                            .   .percent = 3,
  .mode    = 1,                                            .   .mode    = 1,
}                                                          . }
BATT_VOLTAGE_PORT  : 6050                                  . BATT_VOLTAGE_PORT  : 6050
BATT_STATUS_PORT   : 001 10000                             . BATT_STATUS_PORT   : 001 10000
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111 . BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
index              :  29    24      17      10       3   0 . index              :  29    24      17      10       3   0

#+END_SRC

*** LINE-BY-LINE DIFF of Expected vs Actual
No differences found

*** VALGRIND REPORT
The program is run on under valgrind as
stdbuf -i 0 -o 0 -e 0 valgrind --error-exitcode=13 --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_batt_update set_batt_from_ports() 6050 P
which may be pasted onto a command line to run it.

#+BEGIN_SRC text
==48219== Memcheck, a memory error detector
==48219== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==48219== Using Valgrind-3.24.0 and LibVEX; rerun with -h for copyright info
==48219== Command: ./test_batt_update set_batt_from_ports()\ 6050\ P
==48219== 
==48219== 
==48219== HEAP SUMMARY:
==48219==     in use at exit: 0 bytes in 0 blocks
==48219==   total heap usage: 1 allocs, 1 frees, 4 bytes allocated
==48219== 
==48219== All heap blocks were freed -- no leaks are possible
==48219== 
==48219== For lists of detected and suppressed errors, rerun with: -s
==48219== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
#+END_SRC

** SUMMARY
Test Passed
