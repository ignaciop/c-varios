* (TEST 13) set_display_from_batt() more levels : ok
** COMMENTS


** Test Segment 1 : ok
** set_display_from_batt() level 2

*** PROGRAM: ./test_batt_update "set_display_from_batt() level 2"
To run this individual test in GDB use the command:
gdb --args ./test_batt_update "set_display_from_batt() level 2"
but any input to the program must be typed within the debugger

*** FAILURE MESSAGES
None

*** SIDE-BY-SIDE DIFF of Expected vs Actual
. lines match; | lines differ; < expected line missing; > extra line in actual

#+BEGIN_SRC sdiff
===EXPECT===                                                 ===ACTUAL===
{                                                          . {
    // 30% level is first point at which 2 bars show       .     // 30% level is first point at which 2 bars show
    BATT_VOLTAGE_PORT = -1;                                .     BATT_VOLTAGE_PORT = -1;
    BATT_STATUS_PORT  = -1;                                .     BATT_STATUS_PORT  = -1;
    BATT_DISPLAY_PORT = -1;                                .     BATT_DISPLAY_PORT = -1;
    batt_t batt = {                                        .     batt_t batt = {
      .mlvolts = 6480,                                     .       .mlvolts = 6480,
      .percent = 30,                                       .       .percent = 30,
      .mode = 1,                                           .       .mode = 1,
    };                                                     .     };
    int ret = set_display_from_batt(batt, dispint);        .     int ret = set_display_from_batt(batt, dispint);
    printf("ret: %d\n",ret);                               .     printf("ret: %d\n",ret);
    printf("%-18s : %s\n%-18s : %s\n",                     .     printf("%-18s : %s\n%-18s : %s\n",
           "dispint bits", bitstr(*dispint, INT_BITS),     .            "dispint bits", bitstr(*dispint, INT_BITS),
           "index", bitstr_index(INT_BITS));               .            "index", bitstr_index(INT_BITS));
    printf("\n");  print_ports();  printf("\n");           .     printf("\n");  print_ports();  printf("\n");
    BATT_DISPLAY_PORT = *dispint;                          .     BATT_DISPLAY_PORT = *dispint;
    printf("Display based on dispint:\n");                 .     printf("Display based on dispint:\n");
    print_batt_display();                                  .     print_batt_display();
}                                                          . }
---OUTPUT---                                               . ---OUTPUT---
ret: 0                                                     . ret: 0
dispint bits       : 000 00011 0000000 1001111 0111111 001 . dispint bits       : 000 00011 0000000 1001111 0111111 001
index              :  29    24      17      10       3   0 . index              :  29    24      17      10       3   0
                                                           . 
BATT_VOLTAGE_PORT  : -1                                    . BATT_VOLTAGE_PORT  : -1
BATT_STATUS_PORT   : 111 11111                             . BATT_STATUS_PORT   : 111 11111
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111 . BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
index              :  29    24      17      10       3   0 . index              :  29    24      17      10       3   0
                                                           . 
Display based on dispint:                                  . Display based on dispint:
+-^^^-+         ####  ####                                 . +-^^^-+         ####  ####     
|     |            #  #  #                                 . |     |            #  #  #     
|     |            #  #  #                                 . |     |            #  #  #     
|     |         ####  #  #                                 . |     |         ####  #  #     
|#####|            #  #  #  %                              . |#####|            #  #  #  %  
|#####|            #  #  #                                 . |#####|            #  #  #     
+-----+         ####  ####                                 . +-----+         ####  ####     

#+END_SRC

*** LINE-BY-LINE DIFF of Expected vs Actual
No differences found

*** VALGRIND REPORT
The program is run on under valgrind as
stdbuf -i 0 -o 0 -e 0 valgrind --error-exitcode=13 --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_batt_update set_display_from_batt() level 2
which may be pasted onto a command line to run it.

#+BEGIN_SRC text
==48126== Memcheck, a memory error detector
==48126== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==48126== Using Valgrind-3.24.0 and LibVEX; rerun with -h for copyright info
==48126== Command: ./test_batt_update set_display_from_batt()\ level\ 2
==48126== 
==48126== 
==48126== HEAP SUMMARY:
==48126==     in use at exit: 0 bytes in 0 blocks
==48126==   total heap usage: 1 allocs, 1 frees, 4 bytes allocated
==48126== 
==48126== All heap blocks were freed -- no leaks are possible
==48126== 
==48126== For lists of detected and suppressed errors, rerun with: -s
==48126== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
#+END_SRC

** Test Segment 2 : ok
** set_display_from_batt() level 3

*** PROGRAM: ./test_batt_update "set_display_from_batt() level 3"
To run this individual test in GDB use the command:
gdb --args ./test_batt_update "set_display_from_batt() level 3"
but any input to the program must be typed within the debugger

*** FAILURE MESSAGES
None

*** SIDE-BY-SIDE DIFF of Expected vs Actual
. lines match; | lines differ; < expected line missing; > extra line in actual

#+BEGIN_SRC sdiff
===EXPECT===                                                 ===ACTUAL===
{                                                          . {
    // 56% level is should show 3 bars                     .     // 56% level is should show 3 bars
    BATT_VOLTAGE_PORT = -1;                                .     BATT_VOLTAGE_PORT = -1;
    BATT_STATUS_PORT  = -1;                                .     BATT_STATUS_PORT  = -1;
    BATT_DISPLAY_PORT = -1;                                .     BATT_DISPLAY_PORT = -1;
    batt_t batt = {                                        .     batt_t batt = {
      .mlvolts = 6900,                                     .       .mlvolts = 6900,
      .percent = 56,                                       .       .percent = 56,
      .mode = 2,                                           .       .mode = 2,
    };                                                     .     };
    int ret = set_display_from_batt(batt, dispint);        .     int ret = set_display_from_batt(batt, dispint);
    printf("ret: %d\n",ret);                               .     printf("ret: %d\n",ret);
    printf("%-18s : %s\n%-18s : %s\n",                     .     printf("%-18s : %s\n%-18s : %s\n",
           "dispint bits", bitstr(*dispint, INT_BITS),     .            "dispint bits", bitstr(*dispint, INT_BITS),
           "index", bitstr_index(INT_BITS));               .            "index", bitstr_index(INT_BITS));
    printf("\n");  print_ports();  printf("\n");           .     printf("\n");  print_ports();  printf("\n");
    BATT_DISPLAY_PORT = *dispint;                          .     BATT_DISPLAY_PORT = *dispint;
    printf("Display based on dispint:\n");                 .     printf("Display based on dispint:\n");
    print_batt_display();                                  .     print_batt_display();
}                                                          . }
---OUTPUT---                                               . ---OUTPUT---
ret: 0                                                     . ret: 0
dispint bits       : 000 00111 1111101 1101111 0111111 110 . dispint bits       : 000 00111 1111101 1101111 0111111 110
index              :  29    24      17      10       3   0 . index              :  29    24      17      10       3   0
                                                           . 
BATT_VOLTAGE_PORT  : -1                                    . BATT_VOLTAGE_PORT  : -1
BATT_STATUS_PORT   : 111 11111                             . BATT_STATUS_PORT   : 111 11111
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111 . BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
index              :  29    24      17      10       3   0 . index              :  29    24      17      10       3   0
                                                           . 
Display based on dispint:                                  . Display based on dispint:
+-^^^-+  ####   ####  ####                                 . +-^^^-+  ####   ####  ####     
|     |  #      #  #  #  #                                 . |     |  #      #  #  #  #     
|     |  #      #  #  #  #                                 . |     |  #      #  #  #  #     
|#####|  ####   ####  #  #  V                              . |#####|  ####   ####  #  #  V  
|#####|  #  #      #  #  #                                 . |#####|  #  #      #  #  #     
|#####|  #  #      #  #  #                                 . |#####|  #  #      #  #  #     
+-----+  #### o ####  ####                                 . +-----+  #### o ####  ####     

#+END_SRC

*** LINE-BY-LINE DIFF of Expected vs Actual
No differences found

*** VALGRIND REPORT
The program is run on under valgrind as
stdbuf -i 0 -o 0 -e 0 valgrind --error-exitcode=13 --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_batt_update set_display_from_batt() level 3
which may be pasted onto a command line to run it.

#+BEGIN_SRC text
==48177== Memcheck, a memory error detector
==48177== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==48177== Using Valgrind-3.24.0 and LibVEX; rerun with -h for copyright info
==48177== Command: ./test_batt_update set_display_from_batt()\ level\ 3
==48177== 
==48177== 
==48177== HEAP SUMMARY:
==48177==     in use at exit: 0 bytes in 0 blocks
==48177==   total heap usage: 1 allocs, 1 frees, 4 bytes allocated
==48177== 
==48177== All heap blocks were freed -- no leaks are possible
==48177== 
==48177== For lists of detected and suppressed errors, rerun with: -s
==48177== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
#+END_SRC

** Test Segment 3 : ok
** set_display_from_batt() level 4

*** PROGRAM: ./test_batt_update "set_display_from_batt() level 4"
To run this individual test in GDB use the command:
gdb --args ./test_batt_update "set_display_from_batt() level 4"
but any input to the program must be typed within the debugger

*** FAILURE MESSAGES
None

*** SIDE-BY-SIDE DIFF of Expected vs Actual
. lines match; | lines differ; < expected line missing; > extra line in actual

#+BEGIN_SRC sdiff
===EXPECT===                                                     ===ACTUAL===
{                                                              . {
    // 89% is highest percentage at which 4 bars will be shown .     // 89% is highest percentage at which 4 bars will be shown
    BATT_VOLTAGE_PORT = -1;                                    .     BATT_VOLTAGE_PORT = -1;
    BATT_STATUS_PORT  = -1;                                    .     BATT_STATUS_PORT  = -1;
    BATT_DISPLAY_PORT = -1;                                    .     BATT_DISPLAY_PORT = -1;
    batt_t batt = {                                            .     batt_t batt = {
      .mlvolts = 3713,                                         .       .mlvolts = 3713,
      .percent = 89,                                           .       .percent = 89,
      .mode = 2,                                               .       .mode = 2,
    };                                                         .     };
    int ret = set_display_from_batt(batt, dispint);            .     int ret = set_display_from_batt(batt, dispint);
    printf("ret: %d\n",ret);                                   .     printf("ret: %d\n",ret);
    printf("%-18s : %s\n%-18s : %s\n",                         .     printf("%-18s : %s\n%-18s : %s\n",
           "dispint bits", bitstr(*dispint, INT_BITS),         .            "dispint bits", bitstr(*dispint, INT_BITS),
           "index", bitstr_index(INT_BITS));                   .            "index", bitstr_index(INT_BITS));
    printf("\n");  print_ports();  printf("\n");               .     printf("\n");  print_ports();  printf("\n");
    BATT_DISPLAY_PORT = *dispint;                              .     BATT_DISPLAY_PORT = *dispint;
    printf("Display based on dispint:\n");                     .     printf("Display based on dispint:\n");
    print_batt_display();                                      .     print_batt_display();
}                                                              . }
---OUTPUT---                                                   . ---OUTPUT---
ret: 0                                                         . ret: 0
dispint bits       : 000 01111 1001111 0000111 0000110 110     . dispint bits       : 000 01111 1001111 0000111 0000110 110
index              :  29    24      17      10       3   0     . index              :  29    24      17      10       3   0
                                                               . 
BATT_VOLTAGE_PORT  : -1                                        . BATT_VOLTAGE_PORT  : -1
BATT_STATUS_PORT   : 111 11111                                 . BATT_STATUS_PORT   : 111 11111
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111     . BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
index              :  29    24      17      10       3   0     . index              :  29    24      17      10       3   0
                                                               . 
Display based on dispint:                                      . Display based on dispint:
+-^^^-+  ####   ####     #                                     . +-^^^-+  ####   ####     #     
|     |     #      #     #                                     . |     |     #      #     #     
|#####|     #      #     #                                     . |#####|     #      #     #     
|#####|  ####      #     #  V                                  . |#####|  ####      #     #  V  
|#####|     #      #     #                                     . |#####|     #      #     #     
|#####|     #      #     #                                     . |#####|     #      #     #     
+-----+  #### o    #     #                                     . +-----+  #### o    #     #     

#+END_SRC

*** LINE-BY-LINE DIFF of Expected vs Actual
No differences found

*** VALGRIND REPORT
The program is run on under valgrind as
stdbuf -i 0 -o 0 -e 0 valgrind --error-exitcode=13 --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_batt_update set_display_from_batt() level 4
which may be pasted onto a command line to run it.

#+BEGIN_SRC text
==48206== Memcheck, a memory error detector
==48206== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==48206== Using Valgrind-3.24.0 and LibVEX; rerun with -h for copyright info
==48206== Command: ./test_batt_update set_display_from_batt()\ level\ 4
==48206== 
==48206== 
==48206== HEAP SUMMARY:
==48206==     in use at exit: 0 bytes in 0 blocks
==48206==   total heap usage: 1 allocs, 1 frees, 4 bytes allocated
==48206== 
==48206== All heap blocks were freed -- no leaks are possible
==48206== 
==48206== For lists of detected and suppressed errors, rerun with: -s
==48206== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
#+END_SRC

** Test Segment 4 : ok
** set_display_from_batt() level 5

*** PROGRAM: ./test_batt_update "set_display_from_batt() level 5"
To run this individual test in GDB use the command:
gdb --args ./test_batt_update "set_display_from_batt() level 5"
but any input to the program must be typed within the debugger

*** FAILURE MESSAGES
None

*** SIDE-BY-SIDE DIFF of Expected vs Actual
. lines match; | lines differ; < expected line missing; > extra line in actual

#+BEGIN_SRC sdiff
===EXPECT===                                                    ===ACTUAL===
{                                                             . {
    // 90% is lowest percentage at which 5 bars will be shown .     // 90% is lowest percentage at which 5 bars will be shown
    BATT_VOLTAGE_PORT = -1;                                   .     BATT_VOLTAGE_PORT = -1;
    BATT_STATUS_PORT  = -1;                                   .     BATT_STATUS_PORT  = -1;
    BATT_DISPLAY_PORT = -1;                                   .     BATT_DISPLAY_PORT = -1;
    batt_t batt = {                                           .     batt_t batt = {
      .mlvolts = 7440,                                        .       .mlvolts = 7440,
      .percent = 90,                                          .       .percent = 90,
      .mode = 1,                                              .       .mode = 1,
    };                                                        .     };
    int ret = set_display_from_batt(batt, dispint);           .     int ret = set_display_from_batt(batt, dispint);
    printf("ret: %d\n",ret);                                  .     printf("ret: %d\n",ret);
    printf("%-18s : %s\n%-18s : %s\n",                        .     printf("%-18s : %s\n%-18s : %s\n",
           "dispint bits", bitstr(*dispint, INT_BITS),        .            "dispint bits", bitstr(*dispint, INT_BITS),
           "index", bitstr_index(INT_BITS));                  .            "index", bitstr_index(INT_BITS));
    printf("\n");  print_ports();  printf("\n");              .     printf("\n");  print_ports();  printf("\n");
    BATT_DISPLAY_PORT = *dispint;                             .     BATT_DISPLAY_PORT = *dispint;
    printf("Display based on dispint:\n");                    .     printf("Display based on dispint:\n");
    print_batt_display();                                     .     print_batt_display();
}                                                             . }
---OUTPUT---                                                  . ---OUTPUT---
ret: 0                                                        . ret: 0
dispint bits       : 000 11111 0000000 1101111 0111111 001    . dispint bits       : 000 11111 0000000 1101111 0111111 001
index              :  29    24      17      10       3   0    . index              :  29    24      17      10       3   0
                                                              . 
BATT_VOLTAGE_PORT  : -1                                       . BATT_VOLTAGE_PORT  : -1
BATT_STATUS_PORT   : 111 11111                                . BATT_STATUS_PORT   : 111 11111
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111    . BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
index              :  29    24      17      10       3   0    . index              :  29    24      17      10       3   0
                                                              . 
Display based on dispint:                                     . Display based on dispint:
+-^^^-+         ####  ####                                    . +-^^^-+         ####  ####     
|#####|         #  #  #  #                                    . |#####|         #  #  #  #     
|#####|         #  #  #  #                                    . |#####|         #  #  #  #     
|#####|         ####  #  #                                    . |#####|         ####  #  #     
|#####|            #  #  #  %                                 . |#####|            #  #  #  %  
|#####|            #  #  #                                    . |#####|            #  #  #     
+-----+         ####  ####                                    . +-----+         ####  ####     

#+END_SRC

*** LINE-BY-LINE DIFF of Expected vs Actual
No differences found

*** VALGRIND REPORT
The program is run on under valgrind as
stdbuf -i 0 -o 0 -e 0 valgrind --error-exitcode=13 --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_batt_update set_display_from_batt() level 5
which may be pasted onto a command line to run it.

#+BEGIN_SRC text
==48220== Memcheck, a memory error detector
==48220== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==48220== Using Valgrind-3.24.0 and LibVEX; rerun with -h for copyright info
==48220== Command: ./test_batt_update set_display_from_batt()\ level\ 5
==48220== 
==48220== 
==48220== HEAP SUMMARY:
==48220==     in use at exit: 0 bytes in 0 blocks
==48220==   total heap usage: 1 allocs, 1 frees, 4 bytes allocated
==48220== 
==48220== All heap blocks were freed -- no leaks are possible
==48220== 
==48220== For lists of detected and suppressed errors, rerun with: -s
==48220== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
#+END_SRC

** Test Segment 5 : ok
** set_display_from_batt() level 5 V

*** PROGRAM: ./test_batt_update "set_display_from_batt() level 5 V"
To run this individual test in GDB use the command:
gdb --args ./test_batt_update "set_display_from_batt() level 5 V"
but any input to the program must be typed within the debugger

*** FAILURE MESSAGES
None

*** SIDE-BY-SIDE DIFF of Expected vs Actual
. lines match; | lines differ; < expected line missing; > extra line in actual

#+BEGIN_SRC sdiff
===EXPECT===                                                    ===ACTUAL===
{                                                             . {
    // 90% is lowest percentage at which 5 bars will be shown .     // 90% is lowest percentage at which 5 bars will be shown
    BATT_VOLTAGE_PORT = -1;                                   .     BATT_VOLTAGE_PORT = -1;
    BATT_STATUS_PORT  = -1;                                   .     BATT_STATUS_PORT  = -1;
    BATT_DISPLAY_PORT = -1;                                   .     BATT_DISPLAY_PORT = -1;
    batt_t batt = {                                           .     batt_t batt = {
      .mlvolts = 7427,                                        .       .mlvolts = 7427,
      .percent = 89,                                          .       .percent = 89,
      .mode = 2,                                              .       .mode = 2,
    };                                                        .     };
    int ret = set_display_from_batt(batt, dispint);           .     int ret = set_display_from_batt(batt, dispint);
    printf("ret: %d\n",ret);                                  .     printf("ret: %d\n",ret);
    printf("%-18s : %s\n%-18s : %s\n",                        .     printf("%-18s : %s\n%-18s : %s\n",
           "dispint bits", bitstr(*dispint, INT_BITS),        .            "dispint bits", bitstr(*dispint, INT_BITS),
           "index", bitstr_index(INT_BITS));                  .            "index", bitstr_index(INT_BITS));
    printf("\n");  print_ports();  printf("\n");              .     printf("\n");  print_ports();  printf("\n");
    BATT_DISPLAY_PORT = *dispint;                             .     BATT_DISPLAY_PORT = *dispint;
    printf("Display based on dispint:\n");                    .     printf("Display based on dispint:\n");
    print_batt_display();                                     .     print_batt_display();
}                                                             . }
---OUTPUT---                                                  . ---OUTPUT---
ret: 0                                                        . ret: 0
dispint bits       : 000 01111 0000111 1100110 1001111 110    . dispint bits       : 000 01111 0000111 1100110 1001111 110
index              :  29    24      17      10       3   0    . index              :  29    24      17      10       3   0
                                                              . 
BATT_VOLTAGE_PORT  : -1                                       . BATT_VOLTAGE_PORT  : -1
BATT_STATUS_PORT   : 111 11111                                . BATT_STATUS_PORT   : 111 11111
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111    . BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
index              :  29    24      17      10       3   0    . index              :  29    24      17      10       3   0
                                                              . 
Display based on dispint:                                     . Display based on dispint:
+-^^^-+  ####   #  #  ####                                    . +-^^^-+  ####   #  #  ####     
|     |     #   #  #     #                                    . |     |     #   #  #     #     
|#####|     #   #  #     #                                    . |#####|     #   #  #     #     
|#####|     #   ####  ####  V                                 . |#####|     #   ####  ####  V  
|#####|     #      #     #                                    . |#####|     #      #     #     
|#####|     #      #     #                                    . |#####|     #      #     #     
+-----+     # o    #  ####                                    . +-----+     # o    #  ####     

#+END_SRC

*** LINE-BY-LINE DIFF of Expected vs Actual
No differences found

*** VALGRIND REPORT
The program is run on under valgrind as
stdbuf -i 0 -o 0 -e 0 valgrind --error-exitcode=13 --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_batt_update set_display_from_batt() level 5 V
which may be pasted onto a command line to run it.

#+BEGIN_SRC text
==48228== Memcheck, a memory error detector
==48228== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==48228== Using Valgrind-3.24.0 and LibVEX; rerun with -h for copyright info
==48228== Command: ./test_batt_update set_display_from_batt()\ level\ 5\ V
==48228== 
==48228== 
==48228== HEAP SUMMARY:
==48228==     in use at exit: 0 bytes in 0 blocks
==48228==   total heap usage: 1 allocs, 1 frees, 4 bytes allocated
==48228== 
==48228== All heap blocks were freed -- no leaks are possible
==48228== 
==48228== For lists of detected and suppressed errors, rerun with: -s
==48228== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
#+END_SRC

** SUMMARY
Test Passed
