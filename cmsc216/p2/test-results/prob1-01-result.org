* (TEST 1) set_batt_from_ports() 0 Sensor : ok
** COMMENTS


** Test Segment 1 : ok
** set_batt_from_ports() 0 V

*** PROGRAM: ./test_batt_update "set_batt_from_ports() 0 V"
To run this individual test in GDB use the command:
gdb --args ./test_batt_update "set_batt_from_ports() 0 V"
but any input to the program must be typed within the debugger

*** FAILURE MESSAGES
None

*** SIDE-BY-SIDE DIFF of Expected vs Actual
. lines match; | lines differ; < expected line missing; > extra line in actual

#+BEGIN_SRC sdiff
===EXPECT===                                                 ===ACTUAL===
{                                                          . {
    // Check sensor value of 0 and status set for voltage  .     // Check sensor value of 0 and status set for voltage
    BATT_VOLTAGE_PORT = 0;                                 .     BATT_VOLTAGE_PORT = 0;
    BATT_STATUS_PORT  = 0b000000;                          .     BATT_STATUS_PORT  = 0b000000;
    BATT_DISPLAY_PORT = -1;                                .     BATT_DISPLAY_PORT = -1;
    batt_t actual = {};            // all 0s               .     batt_t actual = {};            // all 0s
    int ret = set_batt_from_ports(&actual);                .     int ret = set_batt_from_ports(&actual);
    printf("ret: %d\n",ret);                               .     printf("ret: %d\n",ret);
    printf("actual = "); print_batt(actual);               .     printf("actual = "); print_batt(actual);
    print_ports();                                         .     print_ports();
}                                                          . }
---OUTPUT---                                               . ---OUTPUT---
ret: 0                                                     . ret: 0
actual = {                                                 . actual = {
  .mlvolts = 0,                                            .   .mlvolts = 0,
  .percent = 0,                                            .   .percent = 0,
  .mode    = 2,                                            .   .mode    = 2,
}                                                          . }
BATT_VOLTAGE_PORT  : 0                                     . BATT_VOLTAGE_PORT  : 0
BATT_STATUS_PORT   : 000 00000                             . BATT_STATUS_PORT   : 000 00000
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111 . BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
index              :  29    24      17      10       3   0 . index              :  29    24      17      10       3   0

#+END_SRC

*** LINE-BY-LINE DIFF of Expected vs Actual
No differences found

*** VALGRIND REPORT
The program is run on under valgrind as
stdbuf -i 0 -o 0 -e 0 valgrind --error-exitcode=13 --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_batt_update set_batt_from_ports() 0 V
which may be pasted onto a command line to run it.

#+BEGIN_SRC text
==48114== Memcheck, a memory error detector
==48114== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==48114== Using Valgrind-3.24.0 and LibVEX; rerun with -h for copyright info
==48114== Command: ./test_batt_update set_batt_from_ports()\ 0\ V
==48114== 
==48114== 
==48114== HEAP SUMMARY:
==48114==     in use at exit: 0 bytes in 0 blocks
==48114==   total heap usage: 1 allocs, 1 frees, 4 bytes allocated
==48114== 
==48114== All heap blocks were freed -- no leaks are possible
==48114== 
==48114== For lists of detected and suppressed errors, rerun with: -s
==48114== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
#+END_SRC

** Test Segment 2 : ok
** set_batt_from_ports() 0 P

*** PROGRAM: ./test_batt_update "set_batt_from_ports() 0 P"
To run this individual test in GDB use the command:
gdb --args ./test_batt_update "set_batt_from_ports() 0 P"
but any input to the program must be typed within the debugger

*** FAILURE MESSAGES
None

*** SIDE-BY-SIDE DIFF of Expected vs Actual
. lines match; | lines differ; < expected line missing; > extra line in actual

#+BEGIN_SRC sdiff
===EXPECT===                                                 ===ACTUAL===
{                                                          . {
    // Check sensor value of 0 and status set for percent  .     // Check sensor value of 0 and status set for percent
    BATT_VOLTAGE_PORT = 0;                                 .     BATT_VOLTAGE_PORT = 0;
    BATT_STATUS_PORT  = 0b010000;                          .     BATT_STATUS_PORT  = 0b010000;
    BATT_DISPLAY_PORT = -1;                                .     BATT_DISPLAY_PORT = -1;
    batt_t actual = {};            // all 0s               .     batt_t actual = {};            // all 0s
    int ret = set_batt_from_ports(&actual);                .     int ret = set_batt_from_ports(&actual);
    printf("ret: %d\n",ret);                               .     printf("ret: %d\n",ret);
    printf("actual = "); print_batt(actual);               .     printf("actual = "); print_batt(actual);
    print_ports();                                         .     print_ports();
}                                                          . }
---OUTPUT---                                               . ---OUTPUT---
ret: 0                                                     . ret: 0
actual = {                                                 . actual = {
  .mlvolts = 0,                                            .   .mlvolts = 0,
  .percent = 0,                                            .   .percent = 0,
  .mode    = 1,                                            .   .mode    = 1,
}                                                          . }
BATT_VOLTAGE_PORT  : 0                                     . BATT_VOLTAGE_PORT  : 0
BATT_STATUS_PORT   : 000 10000                             . BATT_STATUS_PORT   : 000 10000
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111 . BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
index              :  29    24      17      10       3   0 . index              :  29    24      17      10       3   0

#+END_SRC

*** LINE-BY-LINE DIFF of Expected vs Actual
No differences found

*** VALGRIND REPORT
The program is run on under valgrind as
stdbuf -i 0 -o 0 -e 0 valgrind --error-exitcode=13 --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_batt_update set_batt_from_ports() 0 P
which may be pasted onto a command line to run it.

#+BEGIN_SRC text
==48176== Memcheck, a memory error detector
==48176== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==48176== Using Valgrind-3.24.0 and LibVEX; rerun with -h for copyright info
==48176== Command: ./test_batt_update set_batt_from_ports()\ 0\ P
==48176== 
==48176== 
==48176== HEAP SUMMARY:
==48176==     in use at exit: 0 bytes in 0 blocks
==48176==   total heap usage: 1 allocs, 1 frees, 4 bytes allocated
==48176== 
==48176== All heap blocks were freed -- no leaks are possible
==48176== 
==48176== For lists of detected and suppressed errors, rerun with: -s
==48176== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
#+END_SRC

** SUMMARY
Test Passed
