* (TEST 6) set_batt_from_ports() FAILS : ok
** COMMENTS


** PROGRAM: ./test_batt_update "set_batt_from_ports() FAILS"
To run this individual test in GDB use the command:
  gdb --args ./test_batt_update "set_batt_from_ports() FAILS"
but any input to the program must be typed within the debugger

** FAILURE MESSAGES
None

** SIDE-BY-SIDE DIFF of Expected vs Actual
. lines match; | lines differ; < expected line missing; > extra line in actual

#+BEGIN_SRC sdiff
===EXPECT===                                                            ===ACTUAL===
{                                                                     . {
    // Negative voltage sensor value should cause a failure and leave .     // Negative voltage sensor value should cause a failure and leave
    // the batt_t struct 'actual' unchanged.                          .     // the batt_t struct 'actual' unchanged.
    BATT_VOLTAGE_PORT = -7200;                                        .     BATT_VOLTAGE_PORT = -7200;
    BATT_STATUS_PORT  = 0b110011;                                     .     BATT_STATUS_PORT  = 0b110011;
    BATT_DISPLAY_PORT = -1;                                           .     BATT_DISPLAY_PORT = -1;
    batt_t actual = {};            // all 0s                          .     batt_t actual = {};            // all 0s
    int ret = set_batt_from_ports(&actual);                           .     int ret = set_batt_from_ports(&actual);
    printf("ret: %d\n",ret);                                          .     printf("ret: %d\n",ret);
    printf("actual = "); print_batt(actual);                          .     printf("actual = "); print_batt(actual);
    print_ports();                                                    .     print_ports();
}                                                                     . }
---OUTPUT---                                                          . ---OUTPUT---
ret: 1                                                                . ret: 1
actual = {                                                            . actual = {
  .mlvolts = 0,                                                       .   .mlvolts = 0,
  .percent = 0,                                                       .   .percent = 0,
  .mode    = 0,                                                       .   .mode    = 0,
}                                                                     . }
BATT_VOLTAGE_PORT  : -7200                                            . BATT_VOLTAGE_PORT  : -7200
BATT_STATUS_PORT   : 001 10011                                        . BATT_STATUS_PORT   : 001 10011
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111            . BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
index              :  29    24      17      10       3   0            . index              :  29    24      17      10       3   0

#+END_SRC

** LINE-BY-LINE DIFF of Expected vs Actual
No differences found

** VALGRIND REPORT
The program is run on under valgrind as
  stdbuf -i 0 -o 0 -e 0 valgrind --error-exitcode=13 --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_batt_update set_batt_from_ports() FAILS
which may be pasted onto a command line to run it.

#+BEGIN_SRC text
==48119== Memcheck, a memory error detector
==48119== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==48119== Using Valgrind-3.24.0 and LibVEX; rerun with -h for copyright info
==48119== Command: ./test_batt_update set_batt_from_ports()\ FAILS
==48119== 
==48119== 
==48119== HEAP SUMMARY:
==48119==     in use at exit: 0 bytes in 0 blocks
==48119==   total heap usage: 1 allocs, 1 frees, 4 bytes allocated
==48119== 
==48119== All heap blocks were freed -- no leaks are possible
==48119== 
==48119== For lists of detected and suppressed errors, rerun with: -s
==48119== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
#+END_SRC

** SUMMARY
Test Passed
